// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
  folders   Folder[] @relation("FolderOwner")
}

model Folder {
  id        Int          @id @default(autoincrement())
  name      String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  owner     User         @relation("FolderOwner", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int
  parent    Folder?      @relation("FolderParent", fields: [parentId], references: [id], onDelete: Cascade)
  parentId  Int?
  children  Folder[]     @relation("FolderParent")
  files     File[]
  share     ShareFolder? @relation("ShareFolder", fields: [shareId], references: [id], onDelete: Cascade)
  shareId   Int?
}

model File {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Cascade)
  folderId  Int
  size      String
}

model ShareFolder {
  id        Int      @id @default(autoincrement())
  folders   Folder[] @relation("ShareFolder")
  createdAt DateTime @default(now())
  expiresAt DateTime
  url       String
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String   @db.Text
  expiresAt DateTime
}
